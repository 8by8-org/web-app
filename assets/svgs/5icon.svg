<svg xmlns="http://www.w3.org/2000/svg" width="569" height="660" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <mask id="a" maskUnits="userSpaceOnUse" x="0" y=".2" width="569" height="660" fill="#000">
    <path fill="#fff" d="M0 .2h569v660H0z"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M10 155.7L284.6 10.2l274.6 145.5v329.5L284.6 650 10 485.2V155.7z"/>
  </mask>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M10 155.7L284.6 10.2l274.6 145.5v329.5L284.6 650 10 485.2V155.7z" fill="#CECECE" fill-opacity=".2"/>
  <path d="M10 155.7l-2.5 4c1.5 1 3.2 1 4.7.2l-2.2-4.2zM284.6 10.2l2.2-4.2c-1.4-.8-3-.8-4.4 0l2.2 4.2zm274.6 145.5l4.4-1.9c-.5-1-1.2-1.8-2.2-2.3l-2.2 4.2zm0 0h4.7c0-.6 0-1.3-.3-1.9l-4.4 2zm0 329.5l2.4 4.1a4.7 4.7 0 002.3-4h-4.7zM284.6 650l-2.4 4c1.5 1 3.3 1 4.8 0l-2.4-4zM10 485.2H5.3c0 1.7.8 3.2 2.3 4.1l2.4-4zm0-329.5l2.5-4a4.7 4.7 0 00-7.2 4H10zm2.5-4l-5 8 5-8zm0 0l-5 8 5-8zm-7.2 4h9.4-9.4zm0 0h9.4-9.4zm0 0v33h9.4v-33H5.3zm0 76.9v65.9h9.4v-65.9H5.3zm0 109.8v66h9.4v-66H5.3zm0 109.9v33h9.4v-33H5.3zm2.3 37L35 505.8l4.9-8.1-27.5-16.5-4.8 8.1zm64 38.4l55 33 4.8-8.1-54.9-33-4.9 8.1zm91.6 55l54.9 33 4.9-8.2-55-33-4.8 8.2zm91.5 54.9l27.5 16.5 4.8-8.2-27.4-16.4-4.9 8zM287 654l27.5-16.5-4.9-8.1-27.4 16.4 4.8 8.2zm64.1-38.5l55-33-5-8-54.9 32.9 5 8.1zm91.6-55l54.9-32.9-4.9-8-55 32.9 5 8zm91.5-54.8l27.4-16.5-4.8-8.1-27.5 16.5 4.9 8zm29.7-20.6v-33h-9.4v33h9.4zm0-76.9v-65.9h-9.4v66h9.4zm0-109.8v-65.9h-9.4v65.9h9.4zm0-109.8v-33h-9.4v33h9.4zm-.3-34.9l-8.7 3.8 8.7-3.8zm0 0l-8.7 3.8 8.7-3.8zm-2.2-2.3L534 137l-4.5 8.3L557 160l4.4-8.4zm-64-34l-55-29-4.4 8.3 55 29.1 4.4-8.3zm-91.6-48.4L351 39.9l-4.4 8.4 54.9 29.1 4.4-8.3zm-91.5-48.6L286.8 6l-4.4 8.4 27.5 14.5 4.4-8.4zM282.3 6L255 20.5l4.5 8.4 27.4-14.5-4.4-8.4zm-64 34l-55 29 4.5 8.4 55-29-4.5-8.5zm-91.5 48.5l-55 29 4.5 8.4 55-29-4.5-8.4zM35.2 137L7.8 151.5l4.4 8.4 27.5-14.6-4.5-8.3zM10 155.7l-4.9 8.1a9.5 9.5 0 009.3.3l-4.4-8.4zM284.6 10.2l4.4-8.4a9.5 9.5 0 00-8.8 0l4.4 8.4zm274.6 145.5l8.7-3.7c-.8-2-2.3-3.6-4.3-4.7l-4.4 8.4zm0 0h9.5c0-1.3-.3-2.5-.8-3.7l-8.7 3.7zm0 329.5l4.9 8.2a9.5 9.5 0 004.6-8.2h-9.5zM284.6 650l-4.9 8.1c3 1.8 6.8 1.8 9.8 0l-4.9-8.1zM10 485.2H.5c0 3.4 1.8 6.4 4.6 8.2l4.9-8.2zm0-329.5l4.9-8a9.5 9.5 0 00-14.4 8H10zm4.9-8l-9.8 16.1 9.8-16.2zm0 0l-9.8 16.1 9.8-16.2zm-14.4 8h19-19zm0 0h19-19zm0 0v33h19v-33H.5zm0 76.9v65.9h19v-65.9H.5zm0 109.8v66h19v-66H.5zm0 109.9v33h19v-33H.5zm4.6 41l27.5 16.5 9.7-16.2L15 477 5 493.4zm64.1 38.5l55 33 9.7-16.3-55-33-9.7 16.3zm91.5 55l55 32.9 9.7-16.3-55-33-9.7 16.3zm91.6 54.8l27.4 16.5 9.8-16.2-27.5-16.5-9.7 16.2zm37.2 16.5l27.4-16.5-9.7-16.2-27.5 16.5 9.8 16.2zm64-38.4l55-33-9.8-16.2-54.9 33 9.8 16.2zm91.6-55l55-32.9-9.8-16.2-55 33 9.8 16.2zm91.5-54.9l27.5-16.4-9.8-16.3-27.4 16.5 9.7 16.2zm32-24.6v-33h-18.9v33h19zm0-76.9v-65.9h-18.9v66h19zm0-109.8v-65.9h-18.9v65.9h19zm0-109.8v-33h-18.9v33h19zM568 152l-17.4 7.4L568 152zm0 0l-17.4 7.4L568 152zm-4.3-4.7l-27.4-14.5-8.9 16.7 27.5 14.6 8.8-16.8zm-64-34l-55-29-8.8 16.7 54.9 29.1 8.9-16.7zM408 65l-54.9-29.1-8.9 16.7 55 29.1 8.8-16.7zm-91.5-48.5L289 1.8l-8.8 16.7 27.4 14.6 8.9-16.7zM280.2 1.8l-27.5 14.6 8.9 16.7L289 18.5l-8.8-16.7zm-64.1 34l-55 29 9 16.8L225 52.5 216 35.8zm-91.5 48.5l-55 29 9 16.8 54.8-29-8.8-16.8zM33 132.8L5.6 147.3l8.8 16.8L42 149.5 33 132.8z" fill="#D2513D" mask="url(#a)"/>
  <path d="M332.1 301.6c-13.2-6-30.2-8.6-52.5-8.6h-24v-10h76.3l24-43H203v96h76.7c19.6 0 30 4 30 9.7 0 5.2-9.5 9.8-29.3 9.8h-77.5v43h77.5c73.6 0 81.6-36.9 81.6-52.6a47.4 47.4 0 00-29.8-44.3z" fill="#D2513D"/>
</svg>