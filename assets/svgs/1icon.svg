<svg xmlns="http://www.w3.org/2000/svg" width="569" height="660" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <mask id="a" maskUnits="userSpaceOnUse" x="0" y="0" width="569" height="660" fill="#000">
    <path fill="#fff" d="M0 0h569v660H0z"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M559.2 155.5v329.6L284.6 649.8 10 485.1V155.5L284.6 10l274.6 145.5z"/>
  </mask>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M559.2 155.5v329.6L284.6 649.8 10 485.1V155.5L284.6 10l274.6 145.5z" fill="#CECECE" fill-opacity=".2"/>
  <path d="M559.2 485l2.4 4.1a4.7 4.7 0 002.3-4h-4.7zm0-329.5h4.7l-.1-1.2-4.6 1.2zM284.6 649.8l-2.4 4c1.5 1 3.3 1 4.8 0l-2.4-4zM10 485.1H5.3c0 1.6.8 3.2 2.3 4l2.4-4zm0-329.6l2.4-4a4.7 4.7 0 00-7.1 4H10zm0 0l-2.4 4.1c1.4.9 3.2.9 4.6.1l-2.2-4.2zM284.6 10l2.2-4.2c-1.4-.7-3-.7-4.4 0l2.2 4.2zm274.6 145.5l-2.2 4.2c1.4.8 3.2.8 4.6 0l-2.4-4.2zm0 0l4.6-1.2a4.7 4.7 0 00-7-2.8l2.4 4zM556.8 481l-27.5 16.5 4.9 8.1 27.4-16.5-4.8-8zm-64.1 38.5l-55 33 5 8 54.9-33-4.9-8zm-91.5 54.9l-55 33 5 8 54.8-32.9-4.8-8.1zm-91.6 54.9l-27.4 16.5 4.8 8 27.5-16.4-4.9-8.1zM287 645.8l-27.4-16.5-4.9 8.1 27.5 16.5 4.8-8.1zm-64-38.5l-55-33-4.8 8.2 54.9 33 4.9-8.2zm-91.6-54.9l-54.9-33-4.9 8.2 55 33 4.8-8.2zm-91.5-55L12.4 481l-4.8 8.1L35 505.6l4.9-8.1zm-25.2-12.3v-33H5.3v33h9.4zm0-77v-65.8H5.3v65.9h9.4zm0-109.8v-65.9H5.3v66h9.4zm0-109.8v-33H5.3v33h9.4zm0-33H5.3h9.4zm0 0H5.3h9.4zm-7.1 4.1l4.8-8.1-4.8 8.1zm0 0l4.8-8.1-4.8 8.1zm4.6.1l27.5-14.5-4.5-8.4-27.4 14.6 4.4 8.3zm64-34l55-29-4.4-8.4-55 29.1 4.5 8.4zm91.6-48.4l55-29.2-4.5-8.3-55 29 4.5 8.5zm91.6-48.6l27.4-14.5-4.4-8.4-27.5 14.6 4.5 8.3zm23-14.5l27.5 14.5 4.4-8.3-27.5-14.6-4.4 8.4zm64 34l55 29 4.4-8.3L351 39.8l-4.4 8.3zM438 96.6l55 29 4.4-8.3-55-29.1-4.4 8.4zm91.5 48.5l27.5 14.5 4.4-8.3-27.4-14.6-4.5 8.4zm32.1 14.4l-4.8-8.1 4.8 8.1zm0 0l-4.8-8.1 4.8 8.1zm-7-2.9l9.2-2.4-9.2 2.4zm0 0l9.2-2.4-9.2 2.4zm-.1-1.2v33h9.4v-33h-9.4zm0 77v65.8h9.4v-65.9h-9.4zm0 109.8v65.9h9.4v-66h-9.4zm0 109.8v33h9.4v-33h-9.4zm4.7 33l4.9 8a9.5 9.5 0 004.6-8h-9.5zm0-329.6h9.5c0-.8-.1-1.6-.3-2.3l-9.2 2.3zM284.6 649.8l-4.9 8.2c3 1.8 6.8 1.8 9.8 0l-4.9-8.2zM10 485.1H.5c0 3.3 1.8 6.4 4.6 8l4.9-8zm0-329.6l4.9-8a9.5 9.5 0 00-14.4 8H10zm0 0l-4.9 8.2a9.5 9.5 0 009.3.2l-4.4-8.4zM284.6 10l4.4-8.4a9.5 9.5 0 00-8.8 0l4.4 8.4zm274.6 145.5l-4.4 8.4a9.5 9.5 0 009.2-.2l-4.8-8.2zm0 0l9.2-2.3a9.5 9.5 0 00-14-5.8l4.8 8.1zM554.3 477L527 493.4l9.7 16.3 27.5-16.5-9.8-16.3zm-64 38.5l-55 33 9.8 16.2 55-33-9.8-16.2zm-91.6 55l-54.9 32.9 9.8 16.2 54.9-33-9.8-16.2zm-91.5 54.8l-27.5 16.5 9.8 16.3 27.4-16.5-9.7-16.3zm-17.7 16.5L262 625.2l-9.7 16.3 27.4 16.5 9.8-16.3zm-64.1-38.4l-55-33-9.7 16.3 55 33 9.7-16.3zm-91.5-55l-55-33-9.7 16.3 55 33 9.7-16.3zm-91.6-54.9L15 477 5 493.2l27.5 16.5 9.7-16.3zm-22.8-8.3v-33H.5v33h19zm0-77v-65.8H.5v65.9h19zm0-109.8v-65.9H.5v66h19zm0-109.8v-33H.5v33h19zm0-33H.5h19zm0 0H.5h19zM5 163.7l9.8-16.3L5 163.7zm0 0l9.8-16.3L5 163.7zm9.3.2L42 149.4 33 132.6 5.6 147.2l8.8 16.7zm64.1-34l55-29-9-16.8-54.9 29.1 9 16.7zM170 81.4l55-29-8.9-16.8-55 29.1 9 16.7zM261.6 33L289 18.4l-8.8-16.8-27.5 14.6 8.9 16.7zm18.6-14.5l27.4 14.5 8.9-16.7L289 1.6l-8.8 16.8zm64 34l55 29 8.8-16.7-54.9-29.1-8.9 16.7zm91.6 48.4l54.9 29.1 8.9-16.7-55-29-8.8 16.6zm91.5 48.6l27.5 14.5 8.8-16.7-27.4-14.6-8.9 16.8zm36.7 14.3l-9.6-16.3 9.6 16.3zm0 0l-9.6-16.3 9.6 16.3zm-14-5.8l18.4-4.8L550 158zm0 0l18.4-4.7-18.3 4.7zm-.3-2.4v33h19v-33h-19zm0 77v65.8h19v-65.9h-19zm0 109.8v65.9h19v-66h-19zm0 109.8v33h19v-33h-19z" fill="#D2513D" mask="url(#a)"/>
  <path d="M255.8 417H339v-45.7h-30.4V257.9h-28.7l-48.1 12v43.2l24-6.1v64.3h-30.4V417h30.4z" fill="#D2513D"/>
</svg>